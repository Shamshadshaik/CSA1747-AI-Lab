{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d29ca987-c3db-458d-b1ca-81712eb0cb4c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solution found in 3 moves.\n"
     ]
    }
   ],
   "source": [
    "import heapq\n",
    "\n",
    "# Function to find the position of the empty tile (0)\n",
    "def find_empty(board):\n",
    "    for i in range(3):\n",
    "        for j in range(3):\n",
    "            if board[i][j] == 0:\n",
    "                return i, j\n",
    "\n",
    "# Function to calculate the Manhattan distance\n",
    "def manhattan(board, goal):\n",
    "    dist = 0\n",
    "    for i in range(3):\n",
    "        for j in range(3):\n",
    "            if board[i][j] != 0:\n",
    "                x, y = divmod(goal.index(board[i][j]), 3)\n",
    "                dist += abs(x - i) + abs(y - j)\n",
    "    return dist\n",
    "\n",
    "# Function to generate new board states by moving the empty tile\n",
    "def generate_states(board, empty_pos):\n",
    "    x, y = empty_pos\n",
    "    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n",
    "    new_states = []\n",
    "    \n",
    "    for move in moves:\n",
    "        nx, ny = x + move[0], y + move[1]\n",
    "        if 0 <= nx < 3 and 0 <= ny < 3:\n",
    "            new_board = [row[:] for row in board]\n",
    "            new_board[x][y], new_board[nx][ny] = new_board[nx][ny], new_board[x][y]\n",
    "            new_states.append((new_board, (nx, ny)))\n",
    "    \n",
    "    return new_states\n",
    "\n",
    "# A* algorithm to solve the puzzle\n",
    "def solve_puzzle(start, goal):\n",
    "    empty_pos = find_empty(start)\n",
    "    goal_flat = [num for row in goal for num in row]\n",
    "    \n",
    "    heap = [(manhattan(start, goal_flat), start, empty_pos, 0, None)]\n",
    "    visited = set()\n",
    "    \n",
    "    while heap:\n",
    "        _, board, empty_pos, g_cost, parent = heapq.heappop(heap)\n",
    "        \n",
    "        if board == goal:\n",
    "            return g_cost\n",
    "        \n",
    "        visited.add(tuple(map(tuple, board)))\n",
    "        \n",
    "        for new_board, new_empty_pos in generate_states(board, empty_pos):\n",
    "            if tuple(map(tuple, new_board)) not in visited:\n",
    "                heapq.heappush(heap, (g_cost + manhattan(new_board, goal_flat), new_board, new_empty_pos, g_cost + 1, board))\n",
    "    \n",
    "    return None\n",
    "\n",
    "# Example usage\n",
    "start = [\n",
    "    [1, 2, 3],\n",
    "    [0, 4, 5],\n",
    "    [7, 8, 6]\n",
    "]\n",
    "\n",
    "goal = [\n",
    "    [1, 2, 3],\n",
    "    [4, 5, 6],\n",
    "    [7, 8, 0]\n",
    "]\n",
    "\n",
    "moves = solve_puzzle(start, goal)\n",
    "print(f\"Solution found in {moves} moves.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6eb78b95-315d-4ffe-8778-d5ee24332ac3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
