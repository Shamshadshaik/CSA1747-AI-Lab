{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f1effcf9-caac-4160-9584-a7754ce92226",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solution found:\n",
      "(3, 3, 1)\n",
      "(3, 1, 0)\n",
      "(3, 2, 1)\n",
      "(3, 0, 0)\n",
      "(3, 1, 1)\n",
      "(1, 1, 0)\n",
      "(2, 2, 1)\n",
      "(0, 2, 0)\n",
      "(0, 3, 1)\n",
      "(0, 1, 0)\n",
      "(1, 1, 1)\n",
      "(0, 0, 0)\n"
     ]
    }
   ],
   "source": [
    "from collections import deque\n",
    "\n",
    "# Define the initial and goal states\n",
    "initial_state = (3, 3, 1)  # (missionaries on the left, cannibals on the left, boat position)\n",
    "goal_state = (0, 0, 0)     # (missionaries on the left, cannibals on the left, boat position)\n",
    "\n",
    "def is_valid_state(state):\n",
    "    missionaries_left, cannibals_left, boat = state\n",
    "    missionaries_right = 3 - missionaries_left\n",
    "    cannibals_right = 3 - cannibals_left\n",
    "\n",
    "    # Check if missionaries are outnumbered by cannibals on either side\n",
    "    if (missionaries_left > 0 and missionaries_left < cannibals_left) or \\\n",
    "       (missionaries_right > 0 and missionaries_right < cannibals_right):\n",
    "        return False\n",
    "\n",
    "    return True\n",
    "\n",
    "def generate_next_states(state):\n",
    "    possible_moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]\n",
    "    next_states = []\n",
    "\n",
    "    for move in possible_moves:\n",
    "        missionaries_left, cannibals_left, boat = state\n",
    "        if boat == 1:\n",
    "            missionaries_left -= move[0]\n",
    "            cannibals_left -= move[1]\n",
    "        else:\n",
    "            missionaries_left += move[0]\n",
    "            cannibals_left += move[1]\n",
    "\n",
    "        missionaries_right = 3 - missionaries_left\n",
    "        cannibals_right = 3 - cannibals_left\n",
    "\n",
    "        if 0 <= missionaries_left <= 3 and 0 <= cannibals_left <= 3 and is_valid_state((missionaries_left, cannibals_left, 1 - boat)):\n",
    "            next_states.append((missionaries_left, cannibals_left, 1 - boat))\n",
    "\n",
    "    return next_states\n",
    "\n",
    "def solve_missionaries_cannibals(initial_state, goal_state):\n",
    "    visited = set()\n",
    "    queue = deque([(initial_state, [])])\n",
    "\n",
    "    while queue:\n",
    "        current_state, path = queue.popleft()\n",
    "\n",
    "        if current_state == goal_state:\n",
    "            return path + [current_state]\n",
    "\n",
    "        if current_state not in visited:\n",
    "            visited.add(current_state)\n",
    "            for next_state in generate_next_states(current_state):\n",
    "                if next_state not in visited:\n",
    "                    queue.append((next_state, path + [current_state]))\n",
    "\n",
    "    return None\n",
    "\n",
    "result = solve_missionaries_cannibals(initial_state, goal_state)\n",
    "\n",
    "if result:\n",
    "    print(\"Solution found:\")\n",
    "    for state in result:\n",
    "        print(state)\n",
    "else:\n",
    "    print(\"No solution found.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4223b769-d197-47d8-a52b-f00cb39bff32",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
